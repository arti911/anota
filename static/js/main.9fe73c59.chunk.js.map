{"version":3,"sources":["hook/index.ts","components/Modal/Title/Title.tsx","components/Modal/Title/index.ts","components/DragHandle/index.tsx","components/Modal/Todo/todoSlice.ts","components/Modal/Actions/constants.ts","components/Modal/Todo/index.ts","components/Modal/Todo/Todo.tsx","components/Sortable/Sortable.tsx","constants.ts","components/Modal/Input/index.ts","components/Modal/Input/Input.tsx","components/Note/noteSlice.ts","components/Modal/Actions/Actions.tsx","components/Modal/Actions/index.ts","appSlice.ts","components/Modal/modalSlice.ts","components/Modal/index.ts","components/Modal/Modal.tsx","components/Logo/index.tsx","components/Header/Header.tsx","components/Header/index.ts","components/Note/Popover/Popover.tsx","components/Note/Popover/index.ts","components/Note/Note.tsx","components/Note/index.ts","components/Content/Content.tsx","components/Content/index.ts","components/Footer/Footer.tsx","components/Footer/index.ts","App.tsx","serviceWorkerRegistration.js","reportWebVitals.js","store/index.ts","index.tsx","utils.ts"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","Text","Typography","TitleModal","props","title","state","modal","useEffect","setTitleHandler","options","onChange","editable","DragHandle","SortableHandle","className","MenuOutlined","todoSlice","createSlice","name","initialState","todos","isEdit","reducers","saveTodo","action","push","payload","checkTodo","index","todo","splice","removeTodo","toggleEdit","saveEditTodo","itemIndex","findIndex","item","id","editTodos","concat","cleatTodos","length","sortTodos","actions","ACTION_TYPE","SOLUTION","TodoModal","setTodoTitleHandler","setCurrentTodoHandler","dispatch","edit","useCallback","confirm","message","success","shape","icon","EditOutlined","type","onClick","okText","cancelText","onConfirm","DeleteOutlined","danger","onCheck","event","console","log","isCheck","target","checked","Item","Wrapper","children","SortableList","SortableContainer","SortableItem","SortableElement","DEFAULT_TODO","InputModal","onChangeTodoTitle","value","save","data","Date","now","trim","saveEdit","currentTodo","todoTitle","onSaveEditinTodo","onSaveTodo","split","filter","map","onClose","placeholder","disabled","CloseOutlined","noteSlice","isVisibleNote","setVisibleNote","undefined","Actions","note","useState","actionType","setActionType","isCompleted","some","completeTodo","onToggleVisibleNote","resetTodos","removeTodos","newTodos","onActionTodos","copyableSettings","text","join","gutter","md","xs","block","EyeInvisibleOutlined","EyeOutlined","copyable","ReloadOutlined","appSlice","notes","getNotes","saveNote","saveEditNote","removeNote","saveNotesAfterSorting","modalSlice","visibleModal","currentNoteIndex","onToggleShow","setTitleEdit","setCurrentNoteIndex","AddModal","itemListRef","useRef","visible","localTitle","setLocalTitle","setCurrentTodo","setTodoTitle","onSaveNote","Number","isFinite","warning","style","top","destroyOnClose","onOk","onCancel","onSortEnd","oldIndex","newIndex","arrayMove","useDragHandle","helperClass","getContainer","ReactDOM","findDOMNode","current","parentElement","dataSource","renderItem","ref","Logo","Header","Layout","anota","justify","align","Popover","onShowModal","Title","ellipsisSetting","rows","tooltip","expandable","symbol","Note","showNote","setShowNote","height","setHeight","cardContentRef","rootClass","classname","onShowNote","firstElementChild","offsetHeight","minHeight","header","wrap","span","level","ellipsis","textAlign","placement","trigger","content","zIndex","EllipsisOutlined","footer","size","Content","ContentAnota","axis","pressDelay","useWindowAsScrollContainer","display","sm","lg","xl","EditFilled","Footer","FooterAnota","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","subscribe","lists","get","getState","localStorage","setItem","JSON","stringify","response","getItem","parse","e","fetchNotes","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9fe73c59.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"../store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { Typography } from \"antd\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { useAppSelector } from \"../../../hook\";\r\nimport { ITitle } from \"../../../interfaces/Modal/types\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst TitleModal = (props: ITitle) => {\r\n  const title = useAppSelector((state) => state.modal.title);\r\n\r\n  useEffect(() => {\r\n    props.setTitleHandler(title);\r\n  }, []);\r\n\r\n  const options = {\r\n    onChange: props.setTitleHandler\r\n  };\r\n\r\n  return <Text editable={options}>{props.title}</Text>;\r\n};\r\n\r\nexport default TitleModal;\r\n","import TitleModal from \"./Title\";\r\n\r\nexport default TitleModal;","import { SortableHandle } from \"react-sortable-hoc\";\r\nimport { MenuOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst DragHandle = SortableHandle(() => <div className=\"drag-handle\"><MenuOutlined /></div>);\r\n\r\nexport default DragHandle;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { ITodoState } from \"../../../interfaces/Modal/types\";\r\n\r\nconst initialState: ITodoState = {\r\n  todos: [],\r\n  isEdit: false\r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState,\r\n  reducers: {\r\n    saveTodo: (state, action) => {\r\n      state.todos.push(action.payload);\r\n    },\r\n    checkTodo: (state, action) => {\r\n      const { index, todo } = action.payload;\r\n\r\n      state.todos.splice(index, 1, todo);\r\n    },\r\n    removeTodo: (state, action) => {\r\n      state.todos.splice(action.payload, 1);\r\n    },\r\n    toggleEdit: (state, action) => {\r\n      state.isEdit = action.payload;\r\n    },\r\n    saveEditTodo: (state, action) => {\r\n      const itemIndex = state.todos.findIndex(\r\n        (item) => item.id === action.payload.id\r\n      );\r\n\r\n      state.todos.splice(itemIndex, 1, action.payload);\r\n    },\r\n    editTodos: (state, action) => {\r\n      state.todos = state.todos.concat(action.payload);\r\n    },\r\n    cleatTodos: (state) => {\r\n      state.todos.splice(0, state.todos.length);\r\n    },\r\n    sortTodos: (state, action) => {\r\n      state.todos = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  saveTodo,\r\n  checkTodo,\r\n  removeTodo,\r\n  toggleEdit,\r\n  saveEditTodo,\r\n  editTodos,\r\n  cleatTodos,\r\n  sortTodos\r\n} = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;\r\n","export const ACTION_TYPE = {\r\n  RESET: \"RESET\",\r\n  REMOVE: \"REMOVE\",\r\n};\r\n\r\n\r\nexport const SOLUTION = {\r\n  YES: \"Да\",\r\n  NO: \"Нет\",\r\n};\r\n","import TodoModal from \"./Todo\";\r\n\r\nexport default TodoModal;","import { Button, List, Checkbox, Popconfirm, message } from \"antd\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useCallback } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hook\";\r\n\r\nimport DragHandle from \"../../DragHandle\";\r\n\r\nimport { checkTodo, removeTodo, toggleEdit } from \"./todoSlice\";\r\nimport { SOLUTION } from \"../Actions/constants\";\r\nimport { ISortTodo } from \"../../../interfaces/Modal/types\";\r\n\r\nconst TodoModal = ({\r\n  todo,\r\n  index,\r\n  setTodoTitleHandler,\r\n  setCurrentTodoHandler\r\n}: ISortTodo) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const todos = useAppSelector((state) => state.todo.todos);\r\n\r\n  const edit = useCallback(() => {\r\n    dispatch(toggleEdit(true));\r\n    setTodoTitleHandler(todo.title);\r\n    setCurrentTodoHandler(todo);\r\n  }, [dispatch, todo, setTodoTitleHandler, setCurrentTodoHandler]);\r\n\r\n  const confirm = useCallback(() => {\r\n    dispatch(removeTodo(index));\r\n    message.success(`${todo.title} успешно удален!`);\r\n  }, [dispatch, index, todo]);\r\n\r\n  const actions = [\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<EditOutlined />}\r\n      type=\"primary\"\r\n      onClick={edit}\r\n    ></Button>,\r\n    <Popconfirm\r\n      title={`Удалить ${todo.title}?`}\r\n      okText={SOLUTION.YES}\r\n      cancelText={SOLUTION.NO}\r\n      onConfirm={confirm}\r\n    >\r\n      <Button shape=\"circle\" icon={<DeleteOutlined />} danger={true}></Button>\r\n    </Popconfirm>\r\n  ];\r\n\r\n  const onCheck = useCallback(\r\n    (event) => {\r\n      console.log(\"==index\", index);\r\n      dispatch(\r\n        checkTodo({\r\n          index,\r\n          todo: {\r\n            ...todos[index],\r\n            isCheck: event.target.checked\r\n          }\r\n        })\r\n      );\r\n    },\r\n    [dispatch, todos, index]\r\n  );\r\n\r\n  return (\r\n    <List.Item className=\"modal-list__item\" actions={actions}>\r\n      <DragHandle />\r\n      <Checkbox checked={todo.isCheck} onChange={onCheck}>\r\n        {todo.title}\r\n      </Checkbox>\r\n    </List.Item>\r\n  );\r\n};\r\n\r\nexport default TodoModal;\r\n","import { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\n\r\nconst Wrapper = (props: any) => props.children;\r\n\r\nconst SortableList = SortableContainer(Wrapper);\r\nconst SortableItem = SortableElement(Wrapper);\r\n\r\nexport { SortableList, SortableItem };\r\n","export const DEFAULT_TODO = {\r\n  id: 0,\r\n  title: \"\",\r\n  isCheck: false,\r\n};\r\n","import InputModal from \"./Input\";\r\n\r\nexport default InputModal;","import { Input, Button, Row } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport { useCallback } from \"react\";\r\n\r\nimport { DEFAULT_TODO } from \"../../../constants\";\r\n\r\nimport { saveTodo, saveEditTodo, toggleEdit } from \"../Todo/todoSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hook\";\r\n\r\nimport \"./style.scss\";\r\n\r\nimport { ITodoCurrent } from \"../../../interfaces/Modal/types\";\r\n\r\nconst SEPARATOR = \";\";\r\n\r\nconst InputModal = (props: ITodoCurrent) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isEdit = useAppSelector((state) => state.todo.isEdit);\r\n\r\n  const onChangeTodoTitle = useCallback(\r\n    ({ target }) => {\r\n      props.setTodoTitleHandler(target.value);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  const save = useCallback((todo: string = \"\", index: number = 0) => {\r\n    const data = {\r\n      ...DEFAULT_TODO,\r\n      id: Date.now() + index,\r\n      title: todo.trim(),\r\n    };\r\n\r\n    dispatch(saveTodo(data));\r\n  }, [ dispatch ]);\r\n\r\n  const saveEdit = useCallback(() => {\r\n    const data = {\r\n      ...props.currentTodo,\r\n      title: props.todoTitle.trim()\r\n    };\r\n\r\n    dispatch(saveEditTodo(data));\r\n  }, [ dispatch, props ]);\r\n\r\n  const onSaveEditinTodo = useCallback(() => {\r\n    saveEdit();\r\n    dispatch(toggleEdit(false));\r\n    props.setTodoTitleHandler(\"\");\r\n  }, [ props, saveEdit, dispatch ]);\r\n\r\n  const onSaveTodo = useCallback(() => {\r\n    props.todoTitle\r\n      .trim()\r\n      .split(SEPARATOR)\r\n      .filter((item) => item.trim() !== \"\")\r\n      .map((item, index) => save(item, index));\r\n\r\n      props.setTodoTitleHandler(\"\");\r\n  }, [ props, save ]);\r\n\r\n  const onClose = useCallback(() => {\r\n    props.setTodoTitleHandler(\"\");\r\n    props.setCurrentTodoHandler(null);\r\n    dispatch(toggleEdit(false));\r\n  }, [props, dispatch]);\r\n\r\n  return (\r\n    <Row className=\"anota-row\">\r\n      <Input\r\n        placeholder=\"Добавьте пункт\"\r\n        onChange={onChangeTodoTitle}\r\n        value={props.todoTitle}\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        disabled={props.todoTitle.length === 0}\r\n        onClick={isEdit ? onSaveEditinTodo : onSaveTodo}\r\n      >\r\n        {isEdit ? \"Сохранить изменения\" : \"Добавить\"}\r\n      </Button>\r\n      <Button icon={<CloseOutlined />} type=\"text\" onClick={onClose}></Button>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default InputModal;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst noteSlice = createSlice({\r\n  name: \"note\",\r\n  initialState: {\r\n    isVisibleNote: true,\r\n  },\r\n  reducers: {\r\n    setVisibleNote: (state, action) => {\r\n      state.isVisibleNote = (action.payload === undefined) ? true : action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setVisibleNote } = noteSlice.actions;\r\n\r\nexport default noteSlice.reducer;\r\n","import { Button, Popconfirm, Row, Col, Typography } from \"antd\";\r\nimport {\r\n  EyeOutlined,\r\n  EyeInvisibleOutlined,\r\n  DeleteOutlined,\r\n  ReloadOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nimport { setVisibleNote } from \"../../Note/noteSlice\";\r\nimport { checkTodo, sortTodos } from \"../Todo/todoSlice\";\r\nimport { ACTION_TYPE, SOLUTION } from \"./constants\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../hook\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst Actions = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const todos = useAppSelector((state) => state.todo.todos);\r\n  const isVisibleNote = useAppSelector((state) => state.note.isVisibleNote);\r\n\r\n  const [ actionType, setActionType ] = useState<string | null>(null);\r\n\r\n  const isCompleted = todos.some((item) => item.isCheck);\r\n\r\n  const completeTodo = todos.filter((item) => item.isCheck);\r\n\r\n  const onToggleVisibleNote = useCallback(() => {\r\n    dispatch(setVisibleNote(!isVisibleNote));\r\n  }, [dispatch, isVisibleNote]);\r\n\r\n  const resetTodos = useCallback((index) => {\r\n    dispatch(checkTodo({\r\n      index,\r\n      todo: {\r\n        ...todos[index],\r\n        isCheck: false,\r\n      }\r\n    }));\r\n  }, [ dispatch, todos ]);\r\n\r\n  const removeTodos = useCallback(() => {\r\n    const newTodos = todos.filter((item) => !item.isCheck);\r\n    \r\n    dispatch(sortTodos(newTodos));\r\n  }, [ todos, dispatch ]);\r\n\r\n  const onActionTodos = useCallback(() => {\r\n    for (let todo of completeTodo) {\r\n      const index = todos.findIndex((item) => item.id === todo.id);\r\n\r\n      actionType === ACTION_TYPE.RESET ? resetTodos(index) : removeTodos();\r\n    }\r\n  }, [ resetTodos, removeTodos, completeTodo, todos, actionType ]);\r\n\r\n  const copyableSettings = {\r\n    text: completeTodo.map((item) => item.title).join(\";\"),\r\n  };\r\n\r\n  return (\r\n    <Row gutter={[ 8, 8 ]} className=\"actions\">\r\n      <Col md={12} xs={24}>\r\n        <Button\r\n          type=\"primary\"\r\n          block={true}\r\n          icon={isVisibleNote ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={onToggleVisibleNote}\r\n        >\r\n          {isVisibleNote ? \"Скрыть\" : \"Показать\"}\r\n        </Button>\r\n      </Col>\r\n      <Col md={12} xs={24}>\r\n        <Button\r\n          disabled={!isCompleted}\r\n          type=\"default\"\r\n          block={true}\r\n          className=\"actions__btn actions__btn--copy\"\r\n        >\r\n          <Text copyable={copyableSettings}></Text>\r\n        </Button>\r\n      </Col>\r\n      <Col md={12} xs={24}>\r\n        <Popconfirm\r\n          title={`Вы действительно хотите сбросить отметки у ${completeTodo.map((item) => item.title).join(\", \")}?`}\r\n          okText={SOLUTION.YES}\r\n          cancelText={SOLUTION.NO}\r\n          onConfirm={onActionTodos}\r\n        >\r\n          <Button\r\n            disabled={!isCompleted}\r\n            type=\"primary\"\r\n            icon={<ReloadOutlined />}\r\n            block={true}\r\n            onClick={() => setActionType(ACTION_TYPE.RESET)}\r\n          >\r\n            Сбросить\r\n          </Button>\r\n        </Popconfirm>\r\n      </Col>\r\n      <Col md={12} xs={24}>\r\n        <Popconfirm\r\n          title={`Вы действительно хотите удалить ${completeTodo.map((item) => item.title).join(\", \")}?`}\r\n          okText={SOLUTION.YES}\r\n          cancelText={SOLUTION.NO}\r\n          onConfirm={onActionTodos}\r\n        >\r\n          <Button\r\n            danger\r\n            disabled={!isCompleted}\r\n            type=\"primary\"\r\n            icon={<DeleteOutlined />}\r\n            block={true}\r\n            onClick={() => setActionType(ACTION_TYPE.REMOVE)}\r\n          >\r\n            Удалить\r\n          </Button>\r\n        </Popconfirm>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Actions;\r\n","import Actions from \"./Actions\";\r\n\r\nexport default Actions;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { INotes } from \"./interfaces/App/types\";\r\n\r\n\r\nconst initialState: INotes = {\r\n  notes: [],\r\n}\r\n\r\nconst appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {\r\n    getNotes: (state, action) => {\r\n      state.notes = action.payload;\r\n    },\r\n    saveNote: (state, action) => {\r\n      state.notes.push(action.payload);\r\n    },\r\n    saveEditNote: (state, action) => {\r\n      state.notes.splice(action.payload.index, 1, action.payload.note);\r\n    },\r\n    removeNote: (state, action) => {\r\n      const index = state.notes.findIndex((item) => item.id === action.payload);\r\n      state.notes.splice(index, 1);\r\n    },\r\n    saveNotesAfterSorting: (state, action) => {\r\n      state.notes = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { getNotes, saveNote, saveEditNote, removeNote, saveNotesAfterSorting } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { IState } from \"../../interfaces/Modal/types\";\r\n\r\nconst initialState: IState = {\r\n  visibleModal: false,\r\n  title: \"Новая заметка\",\r\n  currentNoteIndex: null\r\n}\r\n\r\nconst modalSlice = createSlice({\r\n  name: \"modal\",\r\n  initialState,\r\n  reducers: {\r\n    onToggleShow: (state, action) => {\r\n      state.visibleModal = action.payload;\r\n    },\r\n    setTitleEdit: (state, action) => {\r\n      state.title = action.payload;\r\n    },\r\n    setCurrentNoteIndex: (state, action) => {\r\n      state.currentNoteIndex = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  onToggleShow,\r\n  setTitleEdit,\r\n  setCurrentNoteIndex\r\n} = modalSlice.actions;\r\n\r\nexport default modalSlice.reducer;\r\n","import AddModal from \"./Modal\";\r\n\r\nexport default AddModal;","import { useCallback, useRef, useState } from \"react\";\r\nimport { List, Modal, message } from \"antd\";\r\nimport arrayMove from \"array-move\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport TitleModal from \"./Title\";\r\nimport TodoModal from \"./Todo\";\r\nimport { SortableList, SortableItem } from \"../Sortable/Sortable\";\r\nimport InputModal from \"./Input\";\r\nimport Actions from \"./Actions\";\r\n\r\nimport { saveNote, saveEditNote } from \"../../appSlice\";\r\nimport { onToggleShow, setCurrentNoteIndex, setTitleEdit } from \"./modalSlice\";\r\nimport { cleatTodos, sortTodos } from \"./Todo/todoSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"../../hook\";\r\n\r\nimport \"./style.scss\";\r\nimport { ISort } from \"../../interfaces/Note/types\";\r\nimport { ITodo } from \"../../interfaces/Modal/types\";\r\n\r\nconst AddModal = () => {\r\n  const itemListRef: any = useRef(null);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const visible = useAppSelector((state) => state.modal.visibleModal);\r\n  const todos = useAppSelector((state) => state.todo.todos);\r\n  const currentNoteIndex = useAppSelector((state) => state.modal.currentNoteIndex);\r\n  const isVisibleNote = useAppSelector((state) => state.note.isVisibleNote);\r\n\r\n  const [localTitle, setLocalTitle] = useState<string>(\"\");\r\n  const [currentTodo, setCurrentTodo] = useState<ITodo | null>(null);\r\n  const [todoTitle, setTodoTitle] = useState<string>(\"\");\r\n\r\n  const onCancel = () => {\r\n    dispatch(onToggleShow(false));\r\n    dispatch(cleatTodos());\r\n    dispatch(setCurrentNoteIndex(null));\r\n    dispatch(setTitleEdit(\"Новая заметка\"));\r\n    setTodoTitle(\"\");\r\n  };\r\n\r\n  const saveEdit = useCallback((index: number | null) => {\r\n      const data = {\r\n        note: {\r\n          id: Date.now(),\r\n          title: localTitle,\r\n          todos,\r\n          isVisibleNote,\r\n        },\r\n        index\r\n      };\r\n\r\n      dispatch(saveEditNote(data));\r\n      dispatch(setCurrentNoteIndex(null));\r\n    }, [ dispatch, localTitle, todos, isVisibleNote ]);\r\n\r\n  const save = useCallback(() => {\r\n    const data = {\r\n      id: Date.now(),\r\n      title: localTitle,\r\n      todos,\r\n      isVisibleNote,\r\n    };\r\n\r\n    dispatch(saveNote(data));\r\n  }, [ dispatch, localTitle, todos, isVisibleNote ]);\r\n\r\n  const onSaveNote = useCallback(() => {\r\n    if (todos.length > 0) {\r\n      Number.isFinite(currentNoteIndex) ? saveEdit(currentNoteIndex) : save();\r\n\r\n      dispatch(onToggleShow(false));\r\n      dispatch(setTitleEdit(\"Новая заметка\"));\r\n      dispatch(cleatTodos());\r\n      setTodoTitle(\"\");\r\n    } else {\r\n      message.warning(\"Добавьте контент в заметку!\");\r\n    }\r\n  }, [ dispatch, save, saveEdit, todos, currentNoteIndex ]);\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }: ISort) => dispatch(sortTodos(arrayMove(todos, oldIndex, newIndex)));\r\n\r\n  return (\r\n    <Modal\r\n      title={<TitleModal title={localTitle} setTitleHandler={setLocalTitle} />}\r\n      style={{ top: 20 }}\r\n      visible={visible}\r\n      cancelText={<></>}\r\n      destroyOnClose={true}\r\n      onOk={onSaveNote}\r\n      onCancel={onCancel}\r\n    >\r\n      <InputModal\r\n        todoTitle={todoTitle}\r\n        currentTodo={currentTodo}\r\n        setTodoTitleHandler={setTodoTitle}\r\n        setCurrentTodoHandler={setCurrentTodo}\r\n      />\r\n      {todos.length > 0 && (\r\n        <SortableList\r\n          onSortEnd={onSortEnd}\r\n          useDragHandle\r\n          helperClass=\"modal-list\"\r\n          getContainer={(): any => ReactDOM?.findDOMNode(itemListRef.current)?.parentElement}\r\n        >\r\n          <List\r\n            dataSource={todos}\r\n            renderItem={(item, index) => (\r\n              <SortableItem\r\n                index={index}\r\n                key={item.id + index}\r\n                ref={itemListRef}\r\n              >\r\n                <TodoModal\r\n                  todo={item}\r\n                  index={index}\r\n                  setTodoTitleHandler={setTodoTitle}\r\n                  setCurrentTodoHandler={setCurrentTodo}\r\n                />\r\n              </SortableItem>\r\n            )}\r\n          />\r\n        </SortableList>\r\n      )}\r\n      <Actions />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddModal;\r\n","import \"./style.scss\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo\">\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import { Row, Col, Layout, Statistic } from \"antd\";\r\n\r\nimport { useAppSelector } from \"../../hook\";\r\n\r\nimport Logo from \"../Logo\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst HeaderAnota = () => {\r\n  const notes = useAppSelector((state) => state.anota.notes);\r\n\r\n  return (\r\n    <Header className=\"anota-header\">\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col>\r\n          <Logo />\r\n        </Col>\r\n        <Col>\r\n          <Statistic\r\n            title=\"Количество заметок\"\r\n            value={notes.length}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default HeaderAnota;\r\n","import Header from \"./Header\";\r\n\r\nexport default Header;","import { Button, Popconfirm, Typography } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { removeNote } from \"../../../appSlice\";\r\nimport { INote } from \"../../../interfaces/Note/types\";\r\nimport { SOLUTION } from \"../../Modal/Actions/constants\";\r\nimport {\r\n  onToggleShow,\r\n  setTitleEdit,\r\n  setCurrentNoteIndex\r\n} from \"../../Modal/modalSlice\";\r\nimport { editTodos } from \"../../Modal/Todo/todoSlice\";\r\nimport { setVisibleNote } from \"../noteSlice\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst PopoverNote = (props: INote) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const confirm = useCallback(\r\n    () => dispatch(removeNote(props.id)),\r\n    [props.id, dispatch]\r\n  );\r\n\r\n  const onShowModal = useCallback(() => {\r\n    dispatch(editTodos(props.todos));\r\n    dispatch(setTitleEdit(props.title));\r\n    dispatch(onToggleShow(true));\r\n    dispatch(setCurrentNoteIndex(props.index));\r\n    dispatch(setVisibleNote(props.isVisibleNote));\r\n  }, [dispatch, props]);\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"text\" block={true} onClick={onShowModal}>\r\n        <Text type=\"success\">Редактировать</Text>\r\n      </Button>\r\n      <Popconfirm\r\n        title={`Удалить ${props.title}`}\r\n        okText={SOLUTION.YES}\r\n        cancelText={SOLUTION.NO}\r\n        onConfirm={confirm}\r\n      >\r\n        <Button type=\"text\" block={true}>\r\n          <Text type=\"danger\">Удалить</Text>\r\n        </Button>\r\n      </Popconfirm>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PopoverNote;\r\n","import Popover from \"./Popover\";\r\n\r\nexport default Popover;","import { Checkbox, Typography, Popover, Button, List, Row, Col } from \"antd\";\r\nimport { EllipsisOutlined, EyeOutlined } from \"@ant-design/icons\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport classname from \"classnames\";\r\n\r\nimport PopoverNote from \"./Popover\";\r\n\r\nimport \"./style.scss\";\r\nimport { INote } from \"../../interfaces/Note/types\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst ellipsisSetting = {\r\n  rows: 1,\r\n  tooltip: true,\r\n  expandable: true,\r\n  symbol: <span></span>,\r\n};\r\n\r\nconst Note = (props: INote) => {\r\n  const [ showNote, setShowNote ] = useState(!props.isVisibleNote);\r\n  const [ height, setHeight ] = useState(0);\r\n\r\n  const cardContentRef: any = useRef(null);\r\n\r\n  const rootClass = classname(\"note__card\", {\r\n    \"note__card--flip\": showNote,\r\n  });\r\n\r\n  const onShowNote = useCallback(() => {\r\n    setShowNote(!showNote)\r\n  }, [ showNote ]);\r\n\r\n  \r\n  useEffect(() => {\r\n    setHeight(cardContentRef?.current?.firstElementChild.offsetHeight);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={rootClass} style={{ minHeight: `${height}px` }}>\r\n      <div className=\"note__wrapper note__wrapper--front\" ref={cardContentRef}>\r\n        <List\r\n          dataSource={props.todos}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <Checkbox checked={item.isCheck} key={item.id}>\r\n                {item.title}\r\n              </Checkbox>\r\n            </List.Item>\r\n          )}\r\n          header={\r\n            <Row justify=\"space-between\" align=\"middle\" wrap={false}>\r\n              <Col span=\"21\">\r\n                <Title level={4} ellipsis={ellipsisSetting} style={{ textAlign: \"left\" }}>{props.title}</Title>\r\n              </Col>\r\n              <Col span=\"3\">\r\n                <Popover\r\n                  placement=\"bottomRight\"\r\n                  trigger=\"click\"\r\n                  content={\r\n                    <PopoverNote {...props} index={props.index} />\r\n                  }\r\n                  zIndex={999}\r\n                >\r\n                  <Button type=\"text\" icon={<EllipsisOutlined />}></Button>\r\n                </Popover>\r\n              </Col>\r\n            </Row>\r\n          }\r\n          footer={\r\n            <>\r\n              <div />\r\n              <div style={{ textAlign: \"center\" }}>\r\n                Done {props.todos.filter((item) => item.isCheck).length} of&nbsp; {props.todos.length}\r\n              </div>\r\n              <div>\r\n                { !props.isVisibleNote && <Button type=\"text\" icon={<EyeOutlined />} onClick={onShowNote} /> }\r\n              </div>\r\n            </>\r\n          }\r\n        ></List>\r\n      </div>\r\n      <div className=\"note__wrapper note__wrapper--back\" onClick={onShowNote}>\r\n        <Button type=\"text\" size=\"large\" icon={<EyeOutlined />} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import Note from \"./Note\";\r\n\r\nexport default Note;","import { Layout, Button, Row, Col } from \"antd\";\r\nimport { EditFilled } from \"@ant-design/icons\";\r\nimport arrayMove from \"array-move\";\r\n\r\nimport { SortableItem, SortableList } from \"../Sortable/Sortable\";\r\nimport Note from \"../Note\";\r\n\r\nimport { onToggleShow } from \"../Modal/modalSlice\";\r\nimport { saveNotesAfterSorting } from \"../../appSlice\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../hook\";\r\n\r\nimport { ISort } from \"../../interfaces/Note/types\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst ContentAnota = () => {\r\n  const dispatch = useAppDispatch();\r\n  const notes = useAppSelector((state) => state.anota.notes);\r\n\r\n  const onShowModal = () => dispatch(onToggleShow(true));\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }: ISort) => {\r\n    dispatch(saveNotesAfterSorting(arrayMove(notes, oldIndex, newIndex)));\r\n  };\r\n\r\n  return (\r\n    <Content className=\"anota-main\">\r\n      <Row gutter={[16, 24]}>\r\n        <SortableList\r\n          axis=\"xy\"\r\n          pressDelay={205}\r\n          helperClass=\"anota-main__sort-list\"\r\n          onSortEnd={onSortEnd}\r\n          useWindowAsScrollContainer={true}\r\n        >\r\n          <div style={{ display: \"contents\" }}>\r\n            {notes.map((item, index) => (\r\n              <SortableItem key={item.id} index={index}>\r\n                <Col className=\"note\" xs={24} sm={24} md={12} lg={8} xl={6}>\r\n                  <Note index={index} {...item} />\r\n                </Col>\r\n              </SortableItem>\r\n            ))}\r\n          </div>\r\n        </SortableList>\r\n      </Row>\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"circle\"\r\n        icon={<EditFilled />}\r\n        size=\"large\"\r\n        className=\"anota__btn-add-note\"\r\n        onClick={onShowModal}\r\n      ></Button>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContentAnota;\r\n","import ContentAnota from \"./Content\";\r\n\r\nexport default ContentAnota;","import { Layout } from \"antd\";\r\n\r\nconst { Footer } = Layout;\r\n\r\nconst FooterAnota = () => {\r\n  return <Footer />;\r\n};\r\n\r\nexport default FooterAnota;\r\n","import FooterAnota from \"./Footer\";\r\n\r\nexport default FooterAnota;","import { Layout } from \"antd\";\r\n\r\nimport \"antd/dist/antd.less\";\r\n\r\nimport AddModal from \"./components/Modal\";\r\nimport HeaderAnota from \"./components/Header\";\r\nimport ContentAnota from \"./components/Content\";\r\nimport FooterAnota from \"./components/Footer\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout className=\"anota\">\r\n      <HeaderAnota />\r\n      <ContentAnota />\r\n      <FooterAnota />\r\n      <AddModal />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport modalSlice from \"../components/Modal/modalSlice\";\r\nimport appSlice from \"../appSlice\";\r\nimport todoSlice from \"../components/Modal/Todo/todoSlice\";\r\nimport noteSlice from \"../components/Note/noteSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    anota: appSlice,\r\n    modal: modalSlice,\r\n    todo: todoSlice,\r\n    note: noteSlice,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { get } from \"lodash\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nimport store from \"./store\";\r\nimport { fetchNotes } from \"./utils\";\r\nimport { getNotes } from \"./appSlice\";\r\n\r\nstore.subscribe(() => {\r\n  const data = {\r\n    notes: {\r\n      lists: get(store.getState(), \"anota.notes\", [])\r\n    }\r\n  };\r\n\r\n  localStorage.setItem(\"vuex\", JSON.stringify(data));\r\n});\r\n\r\nconst notes = fetchNotes();\r\n\r\nif (notes) {\r\n  store.dispatch(getNotes(notes))\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { get } from \"lodash\";\r\n\r\nexport const fetchNotes = () => {\r\n  try {\r\n    const response = localStorage.getItem(\"vuex\");\r\n\r\n    if (response) {\r\n      return get(JSON.parse(response), \"notes.lists\", []);\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n"],"sourceRoot":""}